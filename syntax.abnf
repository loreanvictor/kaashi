; Specification for this document:
; https://tools.ietf.org/html/rfc5234

; # Primitive values

primitive = boolean / number / string

; ## Numbers

non-zero = "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9";
zero = "0";
digit = zero / non-zero;
number = non-zero *digit ["." 1*digit];

; ## Strings
;
; For simplicity only ASCII characters are defined here,
; but it is highly recommended for all parser / compilers
; to support a more encompassing encoding such as utf-8

squote = %x27 ; single quote
dquote = %x22 ; double quote 
char-not-squote = %x01-26 / %x28-7f; all characters except NULL and single quote
char-not-dquote = %x01-21 / %x23-7f; all characters except NULL and double quote

string = (squote *char-not-squote squote) / (dquote *char-not-dquote dquote);

; ## Boolean

true = %s"true";
false = %s"false";
boolean = true / false;

; # Expressions and Compound Values

single-expr = object / primitive / identifier
expr = single-expr / ( expr "." identifier ) / ( expr "[" LWSP expr LWSP "]" ) / ( expr WSP expr ) / ( "(" LWSP exp LWSP ")" )

; ## Identifiers
; DISCUSSION: we can add more chars. also we have option 
; to loose and just except the special chars (quotes, dots
; and colon) which is not recommmended.

special-char-identifier = "+" / "-" / "*" / "/" / ">" / "<" / "=" / "!" / "@" / "#" / "$" / "%" / "^" / "&" / "(" / ")" / "_" 
char-identifier = ALPHA / special-char-identifier
identifier = (ALPHA / special-char-identifier) *(ALPHA / special-char-identifier / DIGIT)

; ## Object
; TODO add unboxing for constant-keys
constant-key = primitive / identifier *( "." identifier )
parameteric-key = [constant-key / parameteric-key] "[" LWSP args [ "|" expr ] LWSP "]"

arg = identifier / ( "..." identifier ) / ( "{" LWSP args LWSP "}" ) / ( constant-key LWSP ":" LWSP arg )
args = arg LWSP *(delimiter LWSP args)

definition = key LWSP ":" LWSP expr
; DISCUSSION: we can consider this semantically, by allowing
; optional keys for both definition and extension
extension = [key] LWSP "::" LWSP expr 

lambda-object = definition
trivial-definition = expr

delimiter =  ";" | ","
object-entry = (definition  / extension / trivial-definition)
object = "{" LWSP [object-entry *(LWSP delimiter LWSP object-entry)] LWSP "}" / lambda-object
