; Specification for this document:
; https://tools.ietf.org/html/rfc4234
; # Core ABNF rules
; !syntax("abnf")

; # Ignorables (whitespace and comments)
whitespace-char = %x09-0D / " "
whitespace-optional =  *whitespace-char ; optional whitespace
whitespace = 1*whitespace-char ; necessary whitespace

; TODO comment

; # Primitive values

primitive = boolean / number / string

; ## Numbers

digit = %x30-39
number = *digit ["." 1*digit]

; ## Strings
;
; For simplicity only ASCII characters are defined here,
; but it is highly recommended for all parser / compilers
; to support a more encompassing encoding such as utf-8

squote = "'" ; single quote
dquote = %x22 ; double quote 
char-not-squote = %x01-26 / %x28-7F; all characters except NULL and single quote
char-not-dquote = %x01-21 / %x23-7F; all characters except NULL and double quote

string = (squote *char-not-squote squote) / (dquote *char-not-dquote dquote)

; ## Boolean

true = "true"
false = "false"
boolean = true / false

; # Expressions and Compound Values

single-expr = object / primitive / identifier
expr = single-expr / ( expr "." identifier ) / ( expr "[" whitespace-optional expr whitespace-optional "]" ) / ( expr whitespace expr ) / ( "(" whitespace-optional expr whitespace-optional ")" )

; ## Identifiers

alpha =  %x41-5A / %x61-7A ; A-Z / a-z
char-identifier-operators = "+" / "-" / "*" / "/" / ">" / "<" / "=" / "!" / "@" / "#" / "$" / "%" / "^" / "&" / "|" / "\" / "_" 
identifier = (alpha / char-identifier-operators) *(alpha / char-identifier-operators / digit)

; ## Object

unbox-entry = ( constant-key whitespace-optional ":" whitespace-optional constant-key ) / constant-key
unboxed-key = "{" whitespace-optional [unbox-entry *(whitespace-optional delimiter whitespace-optional unbox-entry)] whitespace-optional "}"
constant-key = primitive / identifier *( "." identifier )

parameteric-key = [constant-key / parameteric-key] "[" whitespace-optional parameteric-args [ "|" expr ] whitespace-optional "]"
parameteric-arg = identifier / ( "..." identifier ) / ( "{" whitespace-optional parameteric-args whitespace-optional "}" ) / ( constant-key whitespace-optional ":" whitespace-optional parameteric-arg )
parameteric-args = parameteric-arg whitespace-optional *(delimiter whitespace-optional parameteric-args)

key = constant-key / parameteric-key / unboxed-key

definition = key whitespace-optional ":" whitespace-optional expr
extension = [key] whitespace-optional "::" whitespace-optional expr 
indexed-definition = expr

delimiter =  ";" / ","
lambda-object = definition
object-entry = (definition  / extension / indexed-definition)
object = "{" whitespace-optional [object-entry *(whitespace-optional delimiter whitespace-optional object-entry)] whitespace-optional "}" / lambda-object
